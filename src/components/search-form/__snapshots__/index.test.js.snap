// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
<RecoilRoot>
  <Batcher
    setNotifyBatcherOfChange={[Function]}
  />
  <SearchForm>
    <Styled(MuiBox)
      className="makeStyles-container-1"
    >
      <div
        className="MuiBox-root MuiBox-root-4 makeStyles-container-1"
      >
        <form
          onSubmit={[Function]}
        >
          <WithStyles(ForwardRef(TextField))
            InputProps={
              Object {
                "className": "makeStyles-input-3",
              }
            }
            className="makeStyles-textField-2"
            color="secondary"
            onChange={[Function]}
            placeholder="Product name"
            size="small"
            type="text"
            value=""
            variant="outlined"
          >
            <ForwardRef(TextField)
              InputProps={
                Object {
                  "className": "makeStyles-input-3",
                }
              }
              className="makeStyles-textField-2"
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              color="secondary"
              onChange={[Function]}
              placeholder="Product name"
              size="small"
              type="text"
              value=""
              variant="outlined"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root makeStyles-textField-2"
                color="secondary"
                disabled={false}
                error={false}
                fullWidth={false}
                required={false}
                size="small"
                variant="outlined"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root makeStyles-textField-2"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="secondary"
                  disabled={false}
                  error={false}
                  fullWidth={false}
                  required={false}
                  size="small"
                  variant="outlined"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root makeStyles-textField-2"
                  >
                    <WithStyles(ForwardRef(OutlinedInput))
                      autoFocus={false}
                      className="makeStyles-input-3"
                      fullWidth={false}
                      multiline={false}
                      onChange={[Function]}
                      placeholder="Product name"
                      type="text"
                      value=""
                    >
                      <ForwardRef(OutlinedInput)
                        autoFocus={false}
                        className="makeStyles-input-3"
                        classes={
                          Object {
                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "input": "MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                            "marginDense": "MuiOutlinedInput-marginDense",
                            "multiline": "MuiOutlinedInput-multiline",
                            "notchedOutline": "MuiOutlinedInput-notchedOutline",
                            "root": "MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={false}
                        multiline={false}
                        onChange={[Function]}
                        placeholder="Product name"
                        type="text"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          className="makeStyles-input-3"
                          classes={
                            Object {
                              "adornedEnd": "MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "input": "MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                              "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiOutlinedInput-inputMultiline",
                              "marginDense": "MuiOutlinedInput-marginDense",
                              "multiline": "MuiOutlinedInput-multiline",
                              "notchedOutline": null,
                              "root": "MuiOutlinedInput-root",
                            }
                          }
                          fullWidth={false}
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          placeholder="Product name"
                          renderSuffix={[Function]}
                          type="text"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            className="makeStyles-input-3"
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl",
                                "fullWidth": "MuiInputBase-fullWidth",
                                "input": "MuiInputBase-input MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                "root": "MuiInputBase-root MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            placeholder="Product name"
                            renderSuffix={[Function]}
                            type="text"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary makeStyles-input-3 MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense"
                                disabled={false}
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Product name"
                                required={false}
                                type="text"
                                value=""
                              />
                              <WithStyles(ForwardRef(NotchedOutline))
                                className="MuiOutlinedInput-notchedOutline"
                                labelWidth={0}
                                notched={false}
                              >
                                <ForwardRef(NotchedOutline)
                                  className="MuiOutlinedInput-notchedOutline"
                                  classes={
                                    Object {
                                      "legend": "PrivateNotchedOutline-legend-6",
                                      "legendLabelled": "PrivateNotchedOutline-legendLabelled-7",
                                      "legendNotched": "PrivateNotchedOutline-legendNotched-8",
                                      "root": "PrivateNotchedOutline-root-5",
                                    }
                                  }
                                  labelWidth={0}
                                  notched={false}
                                >
                                  <fieldset
                                    aria-hidden={true}
                                    className="PrivateNotchedOutline-root-5 MuiOutlinedInput-notchedOutline"
                                    style={
                                      Object {
                                        "paddingLeft": 8,
                                      }
                                    }
                                  >
                                    <legend
                                      className="PrivateNotchedOutline-legend-6"
                                      style={
                                        Object {
                                          "width": 0.01,
                                        }
                                      }
                                    >
                                      <span
                                        dangerouslySetInnerHTML={
                                          Object {
                                            "__html": "&#8203;",
                                          }
                                        }
                                      />
                                    </legend>
                                  </fieldset>
                                </ForwardRef(NotchedOutline)>
                              </WithStyles(ForwardRef(NotchedOutline))>
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(OutlinedInput)>
                    </WithStyles(ForwardRef(OutlinedInput))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(Button))
            color="secondary"
            endIcon={<UNDEFINED />}
            type="submit"
            variant="contained"
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="secondary"
              endIcon={<UNDEFINED />}
              type="submit"
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                type="submit"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  type="submit"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                    disabled={false}
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="submit"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Search
                      <span
                        className="MuiButton-endIcon MuiButton-iconSizeMedium"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "MuiSvgIcon-colorAction",
                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                  "colorError": "MuiSvgIcon-colorError",
                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                  "root": "MuiSvgIcon-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </span>
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </form>
      </div>
    </Styled(MuiBox)>
  </SearchForm>
</RecoilRoot>
`;
